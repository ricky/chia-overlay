resolves `undefined symbol` errors
see: https://github.com/Chia-Network/bls-signatures/issues/286
source: https://github.com/Chia-Network/bls-signatures/commit/797241e9dae1c164c862cbdb38c865d4b124a601.patch

From 797241e9dae1c164c862cbdb38c865d4b124a601 Mon Sep 17 00:00:00 2001
From: Louis Bettens <louis@bettens.info>
Date: Tue, 2 Nov 2021 10:45:38 +0100
Subject: [PATCH] Fix #286

---
 src/bls.cpp        | 2 ++
 src/elements.cpp   | 6 ++++++
 src/privatekey.cpp | 2 ++
 3 files changed, 10 insertions(+)

diff --git a/src/bls.cpp b/src/bls.cpp
index 7586e549..17e8e4c1 100644
--- a/src/bls.cpp
+++ b/src/bls.cpp
@@ -20,6 +20,8 @@
 
 namespace bls {
 
+const size_t BLS::MESSAGE_HASH_LEN;
+
 bool BLSInitResult = BLS::Init();
 
 Util::SecureAllocCallback Util::secureAllocCallback;
diff --git a/src/elements.cpp b/src/elements.cpp
index 36f9e162..79e0eed4 100644
--- a/src/elements.cpp
+++ b/src/elements.cpp
@@ -18,6 +18,8 @@
 
 namespace bls {
 
+const size_t G1Element::SIZE;
+
 G1Element G1Element::FromBytes(const Bytes& bytes)
 {
     if (bytes.size() != SIZE) {
@@ -199,6 +201,8 @@ G1Element operator*(const bn_t& k, const G1Element& a) { return a * k; }
 
 
 
+const size_t G2Element::SIZE;
+
 G2Element G2Element::FromBytes(const Bytes& bytes)
 {
     if (bytes.size() != SIZE) {
@@ -382,6 +386,8 @@ G2Element operator*(const bn_t& k, const G2Element& a) { return a * k; }
 
 // GTElement
 
+const size_t GTElement::SIZE;
+
 GTElement GTElement::FromBytes(const Bytes& bytes)
 {
     if (bytes.size() != SIZE) {
diff --git a/src/privatekey.cpp b/src/privatekey.cpp
index 89f8ab6c..ba92418a 100644
--- a/src/privatekey.cpp
+++ b/src/privatekey.cpp
@@ -16,6 +16,8 @@
 
 namespace bls {
 
+const size_t PrivateKey::PRIVATE_KEY_SIZE;
+
 // Construct a private key from a bytearray.
 PrivateKey PrivateKey::FromBytes(const Bytes& bytes, bool modOrder)
 {
